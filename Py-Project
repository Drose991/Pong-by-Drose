import pygame
import random
import sys

pygame.init()

info = pygame.display.Info()
FULL_WIDTH, FULL_HEIGHT = info.current_w, info.current_h

GAME_RATIO = 0.75
GAME_WIDTH = int(FULL_WIDTH * GAME_RATIO)
GAME_HEIGHT = int(FULL_HEIGHT * GAME_RATIO)

screen = pygame.display.set_mode((FULL_WIDTH, FULL_HEIGHT), pygame.FULLSCREEN)
pygame.display.set_caption("Pong - Fullscreen with centered game area")

WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (40, 40, 40)

font = pygame.font.SysFont("consolas", 40)
clock = pygame.time.Clock()

GAME_X = (FULL_WIDTH - GAME_WIDTH) // 2
GAME_Y = (FULL_HEIGHT - GAME_HEIGHT) // 2

class Paddle:
    def __init__(self, x):  
        self.width = 10
        self.height = GAME_HEIGHT // 6
        self.rect = pygame.Rect(x, GAME_Y + GAME_HEIGHT // 2 - self.height // 2, self.width, self.height)
        self.speed = max(4, GAME_HEIGHT // 150)

    def move(self, up):
        if up:
            self.rect.y -= self.speed
            if self.rect.y < GAME_Y:
                self.rect.y = GAME_Y
        else:
            self.rect.y += self.speed
            if self.rect.y + self.height > GAME_Y + GAME_HEIGHT:
                self.rect.y = GAME_Y + GAME_HEIGHT - self.height

    def draw(self, screen):
        pygame.draw.rect(screen, WHITE, self.rect)

class Ball:
    def __init__(self):  
        self.size = GAME_HEIGHT // 25
        self.rect = pygame.Rect(GAME_X + GAME_WIDTH // 2 - self.size // 2,
                                GAME_Y + GAME_HEIGHT // 2 - self.size // 2,
                                self.size, self.size)
        self.reset()

    def move(self):
        self.rect.x += int(self.dx)
        self.rect.y += int(self.dy)
        if self.rect.top <= GAME_Y or self.rect.bottom >= GAME_Y + GAME_HEIGHT:
            self.dy *= -1

    def reset(self):
        self.rect.center = (GAME_X + GAME_WIDTH // 2, GAME_Y + GAME_HEIGHT // 2)
        self.dx = random.choice([-7, 7])
        self.dy = random.choice([-5, 5])

    def draw(self, screen):
        pygame.draw.ellipse(screen, WHITE, self.rect)

def menu():
    while True:
        screen.fill(BLACK)
        title = font.render("PONG", True, WHITE)
        start_text = pygame.font.SysFont("arial", 30).render("Press SPACE to start", True, WHITE)
        screen.blit(title, (FULL_WIDTH // 2 - title.get_width() // 2, FULL_HEIGHT // 2 - 100))
        screen.blit(start_text, (FULL_WIDTH // 2 - start_text.get_width() // 2, FULL_HEIGHT // 2))
        pygame.display.update()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    return
                if event.key == pygame.K_ESCAPE:
                    pygame.quit()
                    sys.exit()

def game():
    left = Paddle(GAME_X + 30)
    right = Paddle(GAME_X + GAME_WIDTH - 40)
    ball = Ball()
    score_left, score_right = 0, 0

    running = True
    winner = None
    finish_time = None

    while running:
        clock.tick(60)
        for e in pygame.event.get():
            if e.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if e.type == pygame.KEYDOWN and e.key == pygame.K_ESCAPE:
                pygame.quit()
                sys.exit()

        keys = pygame.key.get_pressed()

        if winner is None:
            if keys[pygame.K_w]:
                left.move(True)
            if keys[pygame.K_s]:
                left.move(False)
            if keys[pygame.K_UP]:
                right.move(True)
            if keys[pygame.K_DOWN]:
                right.move(False)

            ball.move()

            if ball.rect.colliderect(left.rect) or ball.rect.colliderect(right.rect):
                ball.dx *= -1.1

            if ball.rect.left <= GAME_X:
                score_right += 1
                ball.reset()
            if ball.rect.right >= GAME_X + GAME_WIDTH:
                score_left += 1
                ball.reset()

            if score_left == 5 or score_right == 5:
                winner = "Left Player" if score_left == 5 else "Right Player"
                finish_time = pygame.time.get_ticks()
        else:
            
            ball.rect.x += 10

        screen.fill(BLACK)
        pygame.draw.rect(screen, GRAY, (GAME_X, GAME_Y, GAME_WIDTH, GAME_HEIGHT))

        left.draw(screen)
        right.draw(screen)
        ball.draw(screen)

        score_text = font.render(f"{score_left} : {score_right}", True, WHITE)
        score_rect = score_text.get_rect(center=(FULL_WIDTH // 2, GAME_Y + 30))
        screen.blit(score_text, score_rect)

        if winner:
            win_text = font.render(f"{winner} Wins!", True, WHITE)
            win_rect = win_text.get_rect(center=(FULL_WIDTH // 2, FULL_HEIGHT // 2))
            screen.blit(win_text, win_rect)
            if pygame.time.get_ticks() - finish_time > 3000:
                running = False

        pygame.display.update()


while True:
    menu()
    game()
